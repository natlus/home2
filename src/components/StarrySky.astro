---
export interface Props {
    id?: string; // Optional ID for multiple instances
    numStars?: number;
    starColor?: string;
    backgroundColor?: string;
    zIndex?: number;
    maxStarSpeed?: number;
    minStarRadius?: number;
    maxStarRadius?: number;
}

const {
    id, // User-provided ID for the component instance
    numStars = 100,
    starColor = "white",
    backgroundColor = "black",
    zIndex = -1, // Default to be a background element
    maxStarSpeed = 0.033, // Pixels per frame for the fastest stars
    minStarRadius = 0.5,
    maxStarRadius = 2,
} = Astro.props;

// Generate a unique ID for the canvas element to support multiple instances
const canvasId = `starry-sky-canvas-${id || "default"}`;
---

<div
    class="starry-sky-container"
    style={`position: fixed; top: 0; left: 0; bottom: 0; right: 0; background-color: ${backgroundColor}; z-index: ${zIndex}; overflow: hidden;`}
>
    <canvas id={canvasId}></canvas>
</div>

<script
    define:vars={{
        canvasId,
        numStars,
        starColor,
        backgroundColorFromProp: backgroundColor,
        maxStarSpeed,
        minStarRadius,
        maxStarRadius,
    }}
>
    // Ensure this script targets the correct canvas
    const canvas = document.getElementById(canvasId);

    if (!canvas) {
        console.error(`StarrySky: Canvas element with ID "${canvasId}" not found.`);
    } else {
        const ctx = canvas.getContext("2d");

        if (!ctx) {
            console.error(`StarrySky (${canvasId}): Failed to get 2D context from canvas.`);
        } else {
            let stars = [];
            let animationFrameId = null;
            let lastTime = 0; // For deltaTime calculation
            let shootingStar; // For the single shooting star

            class Star {
                x;
                y;
                radius;
                vx;
                vy;
                colorValue;

                constructor(canvasWidth, canvasHeight) {
                    this.x = Math.random() * canvasWidth;
                    this.y = Math.random() * canvasHeight;
                    this.radius = Math.random() * (maxStarRadius - minStarRadius) + minStarRadius;

                    const angle = Math.random() * Math.PI * 2; // Random direction
                    const speed = Math.random() * maxStarSpeed; // Random speed up to maxStarSpeed
                    this.vx = Math.cos(angle) * speed;
                    this.vy = Math.sin(angle) * speed;

                    this.colorValue = starColor;
                }

                draw(context) {
                    context.beginPath();
                    context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
                    context.fillStyle = this.colorValue;
                    context.fill();
                }

                update(canvasWidth, canvasHeight) {
                    this.x += this.vx;
                    this.y += this.vy;

                    // Wrap stars around the screen edges
                    if (this.x + this.radius < 0)
                        this.x = canvasWidth + this.radius; // Moved off left edge
                    else if (this.x - this.radius > canvasWidth) this.x = -this.radius; // Moved off right edge

                    if (this.y + this.radius < 0)
                        this.y = canvasHeight + this.radius; // Moved off top edge
                    else if (this.y - this.radius > canvasHeight) this.y = -this.radius; // Moved off bottom edge
                }
            }

            class ShootingStar {
                x;
                y;
                speed;
                color;
                active;
                resetTimer;
                resetDelay;
                tailParticles;
                angle; // Angle of movement in radians
                canvasWidth;
                canvasHeight;

                // Constants for shooting star
                static SPEED = 500; // pixels per second
                static MIN_RESET_DELAY = 1000; // 3 seconds
                static MAX_RESET_DELAY = 10000; // 10 seconds
                static TAIL_LENGTH = 40; // Number of particles in tail
                static PARTICLE_START_RADIUS = 1.5; // Head size

                constructor(canvasWidth, canvasHeight) {
                    this.canvasWidth = canvasWidth;
                    this.canvasHeight = canvasHeight;
                    this.speed = ShootingStar.SPEED;
                    this.color = "rgba(255, 255, 240, 0.9)";
                    this.active = false;
                    this.tailParticles = [];
                    this._scheduleNextAppearance(true);
                }

                _scheduleNextAppearance(immediate = false) {
                    this.active = false;
                    // Tail particles will fade out naturally from previous run
                    this.resetDelay = immediate
                        ? Math.random() * 1500 + 500 // 0.5 to 2 seconds for the first/quick restart
                        : Math.random() * (ShootingStar.MAX_RESET_DELAY - ShootingStar.MIN_RESET_DELAY) +
                          ShootingStar.MIN_RESET_DELAY;
                    this.resetTimer = Date.now();
                }

                _activate() {
                    this.active = true;
                    const edge = Math.floor(Math.random() * 4);

                    if (edge === 0) {
                        // Coming from top
                        this.x = Math.random() * this.canvasWidth;
                        this.y = -ShootingStar.PARTICLE_START_RADIUS * 2;
                        this.angle = Math.random() * (Math.PI * 0.6) + Math.PI * 0.2; // Downwards (0.2PI to 0.8PI)
                    } else if (edge === 1) {
                        // Coming from right
                        this.x = this.canvasWidth + ShootingStar.PARTICLE_START_RADIUS * 2;
                        this.y = Math.random() * this.canvasHeight;
                        this.angle = Math.random() * (Math.PI * 0.6) + Math.PI * 0.7; // Leftwards (0.7PI to 1.3PI)
                    } else if (edge === 2) {
                        // Coming from bottom
                        this.x = Math.random() * this.canvasWidth;
                        this.y = this.canvasHeight + ShootingStar.PARTICLE_START_RADIUS * 2;
                        this.angle = Math.random() * (Math.PI * 0.6) + Math.PI * 1.2; // Upwards (1.2PI to 1.8PI)
                    } else {
                        // Coming from left
                        this.x = -ShootingStar.PARTICLE_START_RADIUS * 2;
                        this.y = Math.random() * this.canvasHeight;
                        this.angle = Math.random() * (Math.PI * 0.6) - Math.PI * 0.3; // Rightwards (-0.3PI to 0.3PI)
                        if (this.angle < 0) this.angle += 2 * Math.PI;
                    }
                    // Initialize tail with the head particle
                    this.tailParticles = [
                        { x: this.x, y: this.y, radius: ShootingStar.PARTICLE_START_RADIUS, opacity: 1 },
                    ];
                }

                _updateTailParticles() {
                    while (this.tailParticles.length > ShootingStar.TAIL_LENGTH) {
                        this.tailParticles.pop(); // Remove oldest particle if tail is too long
                    }

                    for (let i = 0; i < this.tailParticles.length; i++) {
                        const particle = this.tailParticles[i];
                        particle.opacity -= 1 / (ShootingStar.TAIL_LENGTH * 1.5);
                        particle.radius *= 0.95;

                        if (particle.opacity < 0) particle.opacity = 0;
                        if (particle.radius < 0.1) particle.radius = 0.1;
                    }
                    this.tailParticles = this.tailParticles.filter((p) => p.opacity > 0 && p.radius > 0.1);
                }

                update(deltaTime, canvasWidth, canvasHeight) {
                    this.canvasWidth = canvasWidth;
                    this.canvasHeight = canvasHeight;

                    if (!this.active) {
                        if (Date.now() - this.resetTimer > this.resetDelay) {
                            this._activate();
                        }
                    }

                    if (this.active) {
                        const moveDistance = this.speed * deltaTime;
                        this.x += Math.cos(this.angle) * moveDistance;
                        this.y += Math.sin(this.angle) * moveDistance;

                        // Add new particle to the head of the tail
                        this.tailParticles.unshift({
                            x: this.x,
                            y: this.y,
                            radius: ShootingStar.PARTICLE_START_RADIUS,
                            opacity: 1,
                        });

                        const buffer = 50; // pixels
                        const headOffScreen =
                            (this.x > this.canvasWidth + buffer && Math.cos(this.angle) > 0) ||
                            (this.x < -buffer && Math.cos(this.angle) < 0) ||
                            (this.y > this.canvasHeight + buffer && Math.sin(this.angle) > 0) ||
                            (this.y < -buffer && Math.sin(this.angle) < 0);

                        if (headOffScreen) {
                            this._scheduleNextAppearance();
                        }
                    }

                    if (this.tailParticles.length > 0) {
                        this._updateTailParticles();
                    }
                }

                draw(ctx) {
                    for (let i = 0; i < this.tailParticles.length; i++) {
                        const particle = this.tailParticles[i];
                        if (particle.opacity <= 0 || particle.radius <= 0.1) continue;

                        // The first particle (index 0) is the head, make it slightly brighter if active
                        let baseOpacityMultiplier = i === 0 && this.active ? 0.9 : 0.7;

                        ctx.beginPath();
                        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
                        ctx.fillStyle = `rgba(255, 255, 240, ${particle.opacity * baseOpacityMultiplier})`;
                        ctx.fill();
                    }
                }
            }

            function init() {
                if (!canvas || !ctx) return;

                const container = canvas.parentElement;
                // Set canvas dimensions to fill its container
                if (container) {
                    canvas.width = container.clientWidth;
                    canvas.height = container.clientHeight;
                } else {
                    // Fallback if somehow not in a container
                    canvas.width = window.innerWidth;
                    canvas.height = window.innerHeight;
                }

                stars = [];
                for (let i = 0; i < numStars; i++) {
                    stars.push(new Star(canvas.width, canvas.height));
                }
                shootingStar = new ShootingStar(canvas.width, canvas.height); // Initialize shooting star
            }

            function animate(currentTime) {
                // currentTime is passed by requestAnimationFrame
                if (!canvas || !ctx || !canvas.isConnected) {
                    // If canvas is gone, stop animation and clean up
                    cleanup();
                    return;
                }

                if (lastTime === 0) {
                    // Initialize lastTime on the first frame
                    lastTime = currentTime;
                }
                const deltaTime = (currentTime - lastTime) / 1000; // deltaTime in seconds
                lastTime = currentTime;

                // Clear canvas by drawing the background color
                ctx.fillStyle = backgroundColorFromProp;
                ctx.fillRect(0, 0, canvas.width, canvas.height);

                // Update and draw each star
                stars.forEach((star) => {
                    star.update(canvas.width, canvas.height); // Original stars don't use deltaTime
                    star.draw(ctx);
                });

                // Update and draw shooting star
                if (shootingStar) {
                    shootingStar.update(deltaTime, canvas.width, canvas.height);
                    shootingStar.draw(ctx);
                }

                animationFrameId = requestAnimationFrame(animate);
            }

            let resizeTimeout;
            function debouncedHandleResize() {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    if (canvas && canvas.isConnected) {
                        if (animationFrameId) {
                            cancelAnimationFrame(animationFrameId); // Stop current animation
                            animationFrameId = null;
                        }
                        init(); // Re-initialize canvas size and star positions
                        animate(); // Restart animation
                    } else {
                        cleanup(); // Canvas gone, clean up
                    }
                }, 250); // Debounce resize event
            }

            function cleanup() {
                if (animationFrameId) {
                    cancelAnimationFrame(animationFrameId);
                    animationFrameId = null;
                }
                window.removeEventListener("resize", debouncedHandleResize);
                // console.log(`StarrySky (${canvasId}): Cleaned up`);
            }

            // This function will be called to start everything for this instance
            function startEffect() {
                // console.log(`StarrySky (${canvasId}): Starting effect`);
                init();
                animate();
                window.addEventListener("resize", debouncedHandleResize);
                // Listen for Astro's event to clean up before page transition
                document.addEventListener("astro:before-swap", handleBeforeSwap);
            }

            // This specific handler is for 'astro:before-swap'
            function handleBeforeSwap() {
                // console.log(`StarrySky (${canvasId}): astro:before-swap triggered`);
                cleanup();
                // Remove this specific listener as it's tied to this instance/run.
                // If the component persists, astro:page-load will re-initialize.
                document.removeEventListener("astro:before-swap", handleBeforeSwap);
            }

            // Initial setup for the component instance
            startEffect();

            // Handle behavior for persistent components during View Transitions
            document.addEventListener("astro:page-load", () => {
                // This event fires after a page navigation.
                // If this component instance is part of a *persistent* layout
                // and was cleaned up by 'astro:before-swap', we might need to restart it.
                const stillExists = document.getElementById(canvasId);
                if (stillExists && !animationFrameId) {
                    // If canvas is there and not already animating
                    // console.log(`StarrySky (${canvasId}): Restarting on astro:page-load for persistent component`);
                    startEffect(); // This will re-add listeners including 'astro:before-swap'
                }
            });
        }
    }
</script>

<style>
    /* Style the canvas to fill its container */
    /* The container div is styled inline using props */
    canvas[id^="starry-sky-canvas-"] {
        /* Targets canvas elements with IDs starting with "starry-sky-canvas-" */
        display: block; /* Removes extra space below the canvas element */
        width: 100%;
        height: 100%;
        opacity: 0.3;
    }
</style>
